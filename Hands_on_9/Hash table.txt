#include <iostream>
#include <cmath>
using namespace std;

// Node for the doubly linked list
struct Node {
    int key;
    int value;
    Node* next;
    Node* prev;

    Node(int k, int v) : key(k), value(v), next(nullptr), prev(nullptr) {}
};

// Doubly linked list for chaining in the hash table
class DoublyLinkedList {
public:
    Node* head;
    Node* tail;

    DoublyLinkedList() : head(nullptr), tail(nullptr) {}

    // Insert a new node at the end
    void insert(int key, int value) {
        Node* newNode = new Node(key, value);
        if (head == nullptr) {
            head = tail = newNode;
        } else {
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
    }

    // Find a node by key
    Node* find(int key) {
        Node* current = head;
        while (current) {
            if (current->key == key) {
                return current;
            }
            current = current->next;
        }
        return nullptr;
    }

    // Delete a node by key
    bool remove(int key) {
        Node* current = head;
        while (current) {
            if (current->key == key) {
                if (current->prev) {
                    current->prev->next = current->next;
                } else {
                    head = current->next;
                }

                if (current->next) {
                    current->next->prev = current->prev;
                } else {
                    tail = current->prev;
                }

                delete current;
                return true;
            }
            current = current->next;
        }
        return false;
    }
};

// Hash table class
class HashTable {
private:
    int capacity;
    int size;
    DoublyLinkedList* table;

    // Custom hash function (multiplication and division method)
    int hashFunction(int key) {
        double A = (sqrt(5) - 1) / 2;
        return int(capacity * fmod(key * A, 1));
    }

    // Resize the hash table when it is too full or too empty
    void resize(int newCapacity) {
        DoublyLinkedList* oldTable = table;
        int oldCapacity = capacity;

        capacity = newCapacity;
        table = new DoublyLinkedList[capacity];
        size = 0;

        // Rehash all elements into the new table
        for (int i = 0; i < oldCapacity; ++i) {
            Node* current = oldTable[i].head;
            while (current) {
                insert(current->key, current->value);
                current = current->next;
            }
        }

        delete[] oldTable;
    }

public:
    // Constructor
    HashTable(int cap = 4) : capacity(cap), size(0) {
        table = new DoublyLinkedList[capacity];
    }

    // Destructor
    ~HashTable() {
        delete[] table;
    }

    // Insert a key-value pair into the hash table
    void insert(int key, int value) {
        int index = hashFunction(key);
        Node* node = table[index].find(key);

        if (node) {
            node->value = value;
        } else {
            table[index].insert(key, value);
            ++size;
        }

        if (size >= capacity) {
            resize(capacity * 2);
        }
    }

    // Retrieve a value by key
    int get(int key) {
        int index = hashFunction(key);
        Node* node = table[index].find(key);
        if (node) {
            return node->value;
        }
        return -1;  // Indicates not found
    }

    // Delete a key-value pair
    void remove(int key) {
        int index = hashFunction(key);
        if (table[index].remove(key)) {
            --size;
            if (size <= capacity / 4 && capacity > 4) {
                resize(capacity / 2);
            }
        }
    }

    // Display the contents of the hash table
    void display() {
        for (int i = 0; i < capacity; ++i) {
            cout << "Bucket " << i << ": ";
            Node* current = table[i].head;
            while (current) {
                cout << "(" << current->key << ": " << current->value << ") <-> ";
                current = current->next;
            }
            cout << "None" << endl;
        }
    }
};

int main() {
    HashTable hashTable;

    // Insert some elements into the hash table
    hashTable.insert(1, 100);
    hashTable.insert(2, 200);
    hashTable.insert(3, 300);
    hashTable.insert(4, 400);

    // Display the initial table
    cout << "Initial table:" << endl;
    hashTable.display();

    // Trigger a resize by adding more elements
    hashTable.insert(5, 500);
    hashTable.insert(6, 600);

    cout << "\nAfter resizing (grow):" << endl;
    hashTable.display();

    // Delete some elements to trigger a shrink
    hashTable.remove(1);
    hashTable.remove(2);
    hashTable.remove(3);
    hashTable.remove(4);

    cout << "\nAfter resizing (shrink):" << endl;
    hashTable.display();

    return 0;
}
